package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// Config holds all configuration for our program
type Config struct {
	OutputFormat string     `mapstructure:"output-format"`
	DataFile     string     `mapstructure:"data-file"`
	Add          AddConfig  `mapstructure:",squash"`
	List         ListConfig `mapstructure:",squash"`
}

// AddConfig holds configuration specific to add command
type AddConfig struct {
	Priority int    `mapstructure:"priority"`
	Category string `mapstructure:"category"`
}

// ListConfig holds configuration specific to list command
type ListConfig struct {
	SortBy    string `mapstructure:"sort-by"`
	Ascending bool   `mapstructure:"ascending"`
}

func main() {
	cfg := &Config{}

	rootCmd := &cobra.Command{
		TraverseChildren: true,
		Use:              "todo",
		Short:            "A simple todo application",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("Welcome to TODO!")

			fmt.Println("Must provide a subcommand. Run 'todo --help' for usage.")
		},
		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			// Configure Viper to read from environment variables
			viper.SetEnvPrefix("TODO")
			viper.AutomaticEnv()

			// Optional: Read from config file
			viper.SetConfigName("config")
			viper.SetConfigType("yaml")
			viper.AddConfigPath(".")
			if err := viper.ReadInConfig(); err != nil {
				if _, ok := err.(viper.ConfigFileNotFoundError); !ok {
					return fmt.Errorf("failed to read config file: %w", err)
				}
			}

			// Bind all flags to viper with command prefix
			if err := viper.BindPFlags(cmd.Root().Flags()); err != nil {
				return fmt.Errorf("failed to bind flags: %w", err)
			}

			if err := viper.BindPFlags(cmd.Flags()); err != nil {
				return fmt.Errorf("failed to bind persistent flags: %w", err)
			}

			// // Unmarshal the config into our struct
			if err := viper.Unmarshal(cfg); err != nil {
				return fmt.Errorf("failed to unmarshal config: %w", err)
			}

			return nil
		},
	}

	// Global flags
	rootCmd.Flags().String("output-format", "text", "Output format (text/json)")
	rootCmd.Flags().String("data-file", "todo.json", "Data file location")

	// Add command
	addCmd := &cobra.Command{
		Use:   "add [task]",
		Short: "Add a new task",
		Args:  cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			task := args[0]
			fmt.Printf("Adding task: %s (Priority: %d, Category: %s)\n",
				task,
				cfg.Add.Priority, // Changed from AddCmd to Add
				cfg.Add.Category)
			fmt.Printf("Using output format: %s\n", cfg.OutputFormat)
			fmt.Printf("Data file: %s\n", cfg.DataFile)
			return nil
		},
	}

	// Add command flags
	addCmd.Flags().Int("priority", 1, "Task priority (1-5)")
	addCmd.Flags().String("category", "default", "Task category")

	// List command
	listCmd := &cobra.Command{
		Use:   "list",
		Short: "List all tasks",
		RunE: func(cmd *cobra.Command, args []string) error {
			fmt.Printf("Listing tasks (Sort by: %s, Ascending: %v)\n",
				cfg.List.SortBy, // Changed from ListCmd to List
				cfg.List.Ascending)
			fmt.Printf("Using output format: %s\n", cfg.OutputFormat)
			fmt.Printf("Data file: %s\n", cfg.DataFile)
			return nil
		},
	}

	// List command flags
	listCmd.Flags().String("sort-by", "priority", "Sort tasks by (priority/category)")
	listCmd.Flags().Bool("ascending", true, "Sort in ascending order")

	rootCmd.AddCommand(addCmd, listCmd)

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
